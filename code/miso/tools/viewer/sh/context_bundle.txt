--- BEGIN specs/miso.md ---
# miso
*a system for end-user natural language programming*

`miso` is a system that lets laypersons (domain experts) write and maintain their own software tools, using natural language.

`miso` represents programs as a tree of small markdown documents (like this one!) called *snippets* that specify behaviour. To add detail to a snippet, we create child snippets rather than edit the original.

`miso`'s goal is to allow users to create programs that are easy to read, understand, and maintain.

--- END specs/miso.md ---

--- BEGIN specs/miso/tools.md ---
# tools
*executable code*

`tools` are pieces of executable code (command-line utilities, python programs, client/server apps, or native apps) that can be invoked by users or agents to perform repeatable, efficient work.

Tools can call agents, but are always code-first.

Tools live in the code/ folder; a tool implementing feature `A/B/C` will be stored in `code/A/B/C`.

Each tool is described by a natural-language document `pseudocode.md` (in the tool's root folder) that can be run by an agent, by following its instructions precisely.

A tool can contain multiple code implementations; these are stored in subfolders of the tool's code folder, eg. `code/A/B/C/py` or `code/A/B/C/sh`. 

--- END specs/miso/tools.md ---

--- BEGIN specs/miso/tools/viewer.md ---
# viewer
*elegant viewer for spec trees*

The `viewer` tool allows the user to read snippets and navigate through the snippet tree.

The viewer is designed to sit at the left edge of the screen (where a standard IDE's tree-view would go); it shows the markdown content, nicely rendered, and a clickable list of children snippets below it (each showing title and summary).

Navigation is done through clickable breadcrumbs at the top of the display.

The viewer is designed to work well in a narrow width, leaving lots of space for the actual target application.

--- END specs/miso/tools/viewer.md ---
